
Read  Bit Manipulation from CP Agorithms (excellent, this is mostly derived from there only)

0) 100 ~ 00000100  (we can do this to fill all the bits of the type we are using  with leading zeroes )
1) Bits are indexed in 0 Based Indexing from right in left so are the value of the places are 2^index(0 based) . So any text saying ith bit (it is in 0 based system)  Eg  bk.....b2b1b0  where each bit place has a value associated = 2^k.
2)  2^k : {
            - has the kth bit set from right (0 based indexing) , (kth bitn in 0 based indexing  has value 2^k) or,
            - has the (k+1)th bit set from right (1 based indeixing ), (kth bit  in 1 based indexing has value 2^(k+1-1)=2^k)
    }
    2^k-1 : {
            - has all the bits  are set from 0th bit to k-1 th bit (i.e. first k bits are set (fundamental counting is always 1 based),
              while in contrast first k bits of 2^k is off and k+1 th bit is set)
    }


3)  FUNDAMENTAL CONCEPTS REGARDING EACH OPERATOR:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
         AND(&) : - bitwise AND compares each bit of its first operand with the corresponding bit of its second operand. 
                    If both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

 a)  _ & 1 = 1st Bit (***) {fetches the first bit}  { x&1 gives only 1 or 0 based on the 0th bit of x} 

  eg  0 & 1 = 0
      1 & 1 = 1
b)  _ & 0 = 0 (**) {Clearing the bit}
     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          OR (|) : - bitwise inclusive OR operator compares each bit of its first operand with the corresponding bit of its second operand. 
                     If one of the two bits is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

  a) _ | 0 = 1st Bit (***) {fetces the first bit}  { x|0 gives x always}

  eg  0 | 0 = 0
      1 | 0 = 1

  b) _ | 1 = 1 (**)   {Setting the bit}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          XOR (^) : - exclusive OR (XOR) operator compares each bit of its first operand with the corresponding bit of its second operand. 
                      If one bit is 0 and the other bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

     _ ^ 1 = ~1st Bit {Flips the first Bit}

  eg  0 ^ 1 = ~0=1
      1 & 1 = ~1=0
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      RIGHT SHIFT (>>) : - Shifts a number to the right by removing the last few binary digits of the number. 
                           Each shift by one represents an integer division by 2, so a right shift by k represents an integer division by ‚Ää2^k‚Ää.
       x>>k = ‚åäx/2^k‚åã
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      LEFT SHIFT (<<) : - Shifts a number to left by appending zero digits. In similar fashion to a right shift by ‚Ääk‚Ää, a left shift by k‚Ää represents
                          a multiplication by 2^k‚Ää.
       x>>k = x*2^k
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------4) AND Use-Case and Concepts:-
4) USEFUL TRICKS:_

    a}Set/flip/clear a bit:-
            - (1 << x)‚Ääis a number with only the ‚Ääx-th bit (0 based indexing) set, while ‚Ää~(1 << x )‚Ää is a number with all bits set except the x-th bit.
                        EXPLAINATION : {1 is a no. whose 0th bit is set so 1<<1 , jump =1 is a no. whose 1st bit is set (0 based)} 

            i) n | (1<<x) : sets the xth bit in the no. n . {Explaination : (1<<x) has only xth bit set and then using fundamental concept of OR}
           ii) n ^ (1<<x) : flips the xth bit in the no. n. {Explaination : (1<<x) has only xth bit set and then using fundamental concept of XOR }
          iii) n & ~(1<<x) : clear the x th bit in the no. n. {Explaination : ~(1<<x) has only xth bit of and then using fundamental concept of AND ; all the bits except x-th bit are unchanged when & with 1 and the x-th bit is cleared when & with 0}



5) CHECK IF A BIT IS SET OR NOT

            The value of the x-th bit can be checked by shifting the number x positions to the right, so that the 
            x-th bit is at the unit place, after which we can extract it by performing a bitwise & with 1. (fundamental property of AND)

    IMPLEMENTATION:-
    bool is_set(unsigned int number, int x) {
         return (number >> x) & 1;
    }

5a) Checking if the 0th or UNIT bit is set or not hence determinig odd/even repectively

     (x&1) = {
                  1, if x is odd
                  0 , if x is even
        }

        Proof:- 

        Using the fundamental concepts of AND

        Facts: If x is even its last bit is off eg 1 : 0001  eg 15 : 1111 (last bit set)
               If x is odd its last bit is on.  eg 2 : 0010  eg 16 :10000 (last bit off)

        so just referring the fundamental concept of AND 
        x&1  makes the last bit of the ans dependent on the last bit of x and all other bits of the ans is zero . So the ans is 1 if last bit of x is set (when x is odd)
              else the ans is 0 if last bit of x is off  (x is even)
        eg  x = 15 =  1111
                &1 =  0001
              -------------
                      0001 -> 1 -> x is odd
        eg x = 16 = 10000
               &1 = 00001
              -------------
                    00000->0-> x is even




6) CHECK IF A NUMBER IS DIVISIBLE BY A POWER OF 2 or NOT
       Using the and operation, we can check if a number ‚Ään‚Ää is even because n&1 = 1 if n is odd and n&1 = 0 if n is even.
       More generally, n is divisible by 2^k exacly when n&(2^k-1) = 0 


     We can calculate ‚Ää2^k by left shifting 1 by ‚Ääk‚Ää positions. The trick works, because ‚Ää2^k -1‚Ää is a number that consists of exactly k ones .
     And a number that is divisible by ‚Ää2^k‚Ää must have zero digits in those places. 

     {Explaination : so when n is &ed with 2^k-1(last k bits 1 and ahead from k+1 bits all are leading 0s) it fetches the k bits of n 
     (where 2^k is 1), clears all bits ahead of k bits of n in result (where 2^k is 0) so the resulting no. is zero when all fetch bits of n are 0 
     or last k bits of n are zero  which also means n is divisible by 2^ k}
     

     FACTS LEARNED FROM CN : When n is divided by 2^k , its last k bits gives the remainder or if its last k bits are zero n is evenly divisible by 2^k
            
            WHY THE LAST K BITS OF A NUMBER DIVISIBLE BY 2^k is 0: OR Last K bits is the Remainder When a number is divided by 2^k

            Vague Proof
            A number is divisible by 2^ùëò if it is a multiple of 2^k . This means that it can be written as ùëÅ = ùëö*(2^k) , where m is an integer.
            And when m=1 the number is  2^k where its k+1 th place (1 Based indexing) is 1 followed by k zeroes, next value of N is 2*2^k or 2^k+1 which has k+1
            0s at the end, next value of m=3 which also has no less k 0s at the end.

            If we add any other non zero binary digit in any of these k positions , the number will no longer be divisible bu 2^k , because we would 
            be adding values less that 2^k( tabhi toh last k bits zero nei hain) that would create a remainder.
            
     IMPLEMENTATION:

     //here k is kth bit in 0 based indexing and counting wise last k bits are 0/1(this counting is always 1 based)
      bool isDivisibleByPowerOf2(int n, int k) {
          int powerOf2 = 1 << k;
          return (n & (powerOf2 - 1)) == 0;
       }


7) CHECK IF AN INTEGER IS A POWER OF 2 OR NOT

            A power of 2 is a numner that has only a single bit in it (eg 32= 00100000), while the predecessor of that number has that digit not set and all the digits after it set
            (eg 31=00011111). So the bitwise AND of a number with its predecessor will always be 0, as they dont have any common digits set. You can easily check that this only 
            happens for the power of twos and for the number 0 (which is not a power of 2 we need to exclude n=0) which already has no digit set.

            IMPLEMENTATION:

            //here the condition is n!=0 and n&(n-1)==0

            bool isPowerOfTwo(unsigned int n) {
                return n && !(n & (n - 1));            //n is true when n!=0 and !(n&(n-1)) is true when (n&(n-1))==0
            }



8)CLEAR THE RIGHTMOST SET BIT (extension of 7th trick for a general number n (not power of 2))

            The expression n&(n-1) can be used to turn off the rightmost set bit of a number n. This works because the expression n-1 flips all bits after the rightmost 
            set bit of n, including the rightmost set bit. So all those digits are different from the original number , and by doing a bitwise AND they are all set to 0, 
            giving you the original number n with the rightnmost set bit flipped.  {Self Explainatory}

            For example, consider the number 52 = 00110100 

            n         = 00110|100
            n-1       = 00110|011
            ---------------------
            n & (n-1) = 00110|000 (right most set bit flipped )
            

9) BRIAN KERNIGHAN'S ALGORITHM

            We can count the number of bits set with above expression.(trick 8)

            The idea is to consider only the set bits of an integer by turning off the rightmost set 
            bit (after counting it), so the next iteration of the loop considers the NEXT RIGHTMOST bit.


            IMPLEMENTATION
            int countSetBits(int n)
            {
                int count = 0;
                while (n)             //as long as n!=0 , and as long as a single bit of n is set n is not equal to 0.
                {
                    n = n & (n - 1);
                    count++;
                }
                return count;
            }
            
10) COUNT SET BITS UPTO N.

            To count the number of set bits of all numbers upto n (inclusive), we can run the Brian Kernighan's algorithm
            on all the number upto n. But this will result in a "Time Limit Exceeded" in contest submissions

            We can use the fact that for number upto 2^x (i.e. from 1 to 2^x-1) there are x.2^(x-1) set bits . This can be visualised as follows.

            0 -> 0 0 0 0 
            1 -> 0 0 0 1
            2 -> 0 0 1 0 
            3 -> 0 0 1 1 
            4 -> 0 1 0 0 
            5 -> 0 1 0 1
            6 -> 0 1 1 0
            7 -> 0 1 1 1 
            8 -> 1 0 0 0


            We can see that all the columns except the leftmost have 4 (i.e. 2^2 = 2^(3-1)) set bits each, i.e. upto 
            the number 2^3-1 , the number of set bits is 3.2^(3-1).

            With this new knowledge in hand we can come up with following algorithm:

            - Find the highest power of 2 that is lesser than or equal to the given number . Let this number(actuallly power) be x

            - Calculate the number of set bits fromo 1 to 2^x -1 by using the formula x. 2^(x-1). 

            - Count the no. of set bits in the most significant bit from 2^x and add it . (n-2^x+1=new(n)-1)

            - Subtract 2^x from n and repeat the above steps using the new n.

            IMPLEMENTATION:-

            int countSetBits(int n) {
                    int count = 0;
                    while (n > 0) {
                        int x = std::bit_width(n) - 1; //calculates x ; x is the highest power of 2 ; 2^x<=n
                        count += x << (x - 1);         // x<<(x-1) is x* 2^(x-1) which is the no. of set bits in the range[1,2^x)
                        n -= 1 << x;                   // 1<<x is the number 2^x , so this is basically n-2^x
                        count += n + 1;
                    }
                    return count;
            }

            Explaination of the code:

            STEP-1:
            
            int x = std :: bit_width(n) - 1;
            This line calculates x, which is the index of most significant bit (MSB) of n.(ofc in 0 based indexing) (i.e. x is the highest power of 2 ; 2^x<=n)
            std :: bit_width(n) returns the number of bits (1 based counting) required to represent n  in binary , and substracting 1 gives us the index (0 based) of the MSB.
            For example : 

            For n=13 (1101) bit_width(n) is 4 , so x=4-1 =3, and 2^3=8 is the highest power of 2 ; 2^3<=13
            For n=8 (1000) bit width(n) is 4 , so x=4-1 = 3, and 2^3=8 is the highes power of 2 ; 2^3<=8.

            STEP-2:

            count+=x<<(x-1); 
            This line adds x*2^(x-1) to count which is the number of bits from [1 to 2^x-1].

            STEP-3 (Actually 4 implementation wise) : 

            count+=n+1 ; 
            
            Actually we can view this line as count+=(n-2^x)+1.Basically n is the updated n=n-2^x.This line counts the no. of set bits in the most significant bit from 2^x to n and adds it.
            - Fact:- From every no. n=2^k , a new column is added (bit_width increases and this coloumn is always set for all f<2^(k+1))
            - The observation is 2^x <= n <=2^(x+1) , so all the nos from 2^x to 2^(x+1)-1 has same bit_width (which implies x-th bit (0 based) is always set (warna bit width obvio kam jayega)), 
            the bit_width increases from 2^(x+1).
            - Point is no. of set bits in the most significant bits is equal to the numbers present between [2^x->n] which is n-2^x+1.
            - Now why are we counting this , see till 1->2^x-1 no. of coloumms was one less then from 2^x (i.e. bit_width() is one less).
            - Now we have calculated all the set bits in all the columns for 1->2^x-1 using the formula x*2^(x-1) in O(1) time now all the bits from 2^x (an added columns also) are to be counted.
            - Wherein we calculate the no. of bits in this new added coloumn (from 2^x, basically x-th column) by using the fact that all the MSB are set to maintain the bit_width hence the entire column is set and no. of bits set in the Most Significant Coloumns = nos between [2^x -> n]
            - For the numbers 2^x -> n we don't calculate the set bits for the remaining x-coloums (0- (x-1) ) because we can do that in O(1) time just by updating n-n-2^x and using the formula.
            - Proof :- not yet discovered by have observed this is true by drying running n=13. But, an intution is that 2^x <= n < 2^(x+1), so
                        0 <= n-2^x < 2^(x+1)-2^x
                     => 0 <= n-2^x < 2^x(2-1)
                     => 0 <= n-2^x < 2^x
               Basically n-2^x is less than 2^x(x+1 columns) which means it would have only from [1->2^x-1] which has x coloumns, so kind no. of columns we have not counted is x , and new n=n-2^x also has x coulumns so hoping that 
               this a divide and conquer algorithm where we can calculate no. of bits now with the formula (x-1)*2^(x-2)...so on
            
            - Also note that from the inequality that the value of n ends at 0 , when,x = 0, 2^0=1,, so n<1=>n=0 . Inference is this algorithm has a definite ending.
            
            


11) Additional TRICKS:
            -n&(n+1): clears all trailing ones:  00110|111  -> 00110|000
            -n|(n+1): sets the last cleard bit:  001101|0|1 -> 001101|1|1
            - (n&-n): extracts the last set bit: 00110|1|00 -> 00000|1|00

FOR MORE TRICKS REFER THE BOOK HACKER's DELIGHT
            
            

            



            









    
